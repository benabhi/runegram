# src/utils/inline_keyboards.py
"""
M√≥dulo de Utilidades para Botones Inline de Telegram.

Este m√≥dulo centraliza la creaci√≥n de teclados inline (InlineKeyboardMarkup) para
mejorar la experiencia de usuario en Telegram, permitiendo interacci√≥n mediante
botones en lugar de comandos de texto.

El sistema est√° dise√±ado para ser:
- Escalable: F√°cil agregar nuevos tipos de botones
- Mantenible: Funciones reutilizables y bien documentadas
- Robusto: Formato estructurado de callback_data
- Preparado para futuro teclado din√°mico completo

Responsabilidades:
1. Crear teclados inline para diferentes contextos del juego
2. Generar callback_data estructurado y parseable
3. Proveer helpers para botones comunes
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict, Any, Optional
from src.models import Room
from src.templates import get_direction_icon


# ===========================
# Sistema de Callback Data
# ===========================

def create_callback_data(action: str, **params) -> str:
    """
    Crea una cadena de callback_data estructurada y parseable.

    Formato: "action:param1=value1:param2=value2"
    M√°ximo: 64 bytes (limitaci√≥n de Telegram)

    Args:
        action: La acci√≥n a realizar (ej: "move", "create_char", "use_item")
        **params: Par√°metros adicionales como pares clave-valor

    Returns:
        str: Callback_data formateado

    Examples:
        >>> create_callback_data("move", direction="norte")
        "move:direction=norte"
        >>> create_callback_data("use_item", item_id=5)
        "use_item:item_id=5"
    """
    parts = [action]
    for key, value in params.items():
        parts.append(f"{key}={value}")
    return ":".join(parts)


def parse_callback_data(callback_data: str) -> Dict[str, Any]:
    """
    Parsea una cadena de callback_data en un diccionario.

    Args:
        callback_data: Cadena en formato "action:param1=value1:param2=value2"

    Returns:
        dict: {'action': str, 'params': dict} con la acci√≥n y par√°metros

    Examples:
        >>> parse_callback_data("move:direction=norte")
        {'action': 'move', 'params': {'direction': 'norte'}}
    """
    parts = callback_data.split(":")
    action = parts[0]
    params = {}

    for part in parts[1:]:
        if "=" in part:
            key, value = part.split("=", 1)
            # Intentar convertir a int si es posible
            try:
                value = int(value)
            except ValueError:
                pass
            params[key] = value

    return {"action": action, "params": params}


# ===========================
# Botones de Creaci√≥n de Personaje
# ===========================

def create_character_creation_keyboard() -> InlineKeyboardMarkup:
    """
    Crea un teclado inline con bot√≥n para iniciar la creaci√≥n de personaje.

    Este bot√≥n inicia un flujo FSM (Finite State Machine) que solicita
    el nombre del personaje de forma interactiva y robusta.

    Returns:
        InlineKeyboardMarkup: Teclado con bot√≥n "Crear personaje"
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    button = InlineKeyboardButton(
        text="‚ú® Crear personaje",
        callback_data=create_callback_data("create_char", step="start")
    )
    keyboard.add(button)
    return keyboard


# ===========================
# Botones de Navegaci√≥n de Salas
# ===========================

def create_room_navigation_keyboard(room: Room) -> Optional[InlineKeyboardMarkup]:
    """
    Crea un teclado inline con botones para las salidas disponibles en una sala.

    Cada bot√≥n ejecuta el comando de movimiento correspondiente cuando se presiona.
    Los botones incluyen el √≠cono de direcci√≥n para mejor UX.

    Args:
        room: Objeto Room con las salidas cargadas (room.exits_from)

    Returns:
        InlineKeyboardMarkup o None: Teclado con botones de salidas, o None si no hay salidas

    Examples:
        Si la sala tiene salidas "norte" y "sur":
        [ ‚¨ÜÔ∏è Norte ] [ ‚¨áÔ∏è Sur ]
    """
    if not room.exits_from:
        return None

    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = []

    # Ordenar salidas alfab√©ticamente para consistencia
    sorted_exits = sorted(room.exits_from, key=lambda e: e.name)

    for exit in sorted_exits:
        # Obtener √≠cono de direcci√≥n
        icon = get_direction_icon(exit.name)
        direction_name = exit.name.capitalize()

        # Crear bot√≥n
        button = InlineKeyboardButton(
            text=f"{icon} {direction_name}",
            callback_data=create_callback_data("move", direction=exit.name)
        )
        buttons.append(button)

    # Agregar botones de 2 en 2 para mejor disposici√≥n
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            keyboard.row(buttons[i], buttons[i + 1])
        else:
            keyboard.row(buttons[i])

    return keyboard


# ===========================
# Botones de Inventario (Futuro)
# ===========================

def create_inventory_keyboard(items: List, page: int = 1, per_page: int = 5) -> InlineKeyboardMarkup:
    """
    Crea un teclado inline para interactuar con items del inventario.

    FUTURO: Este es un placeholder para el teclado din√°mico completo.
    Permitir√° usar, examinar, dejar, etc. items directamente con botones.

    Args:
        items: Lista de items
        page: P√°gina actual
        per_page: Items por p√°gina

    Returns:
        InlineKeyboardMarkup: Teclado con botones de items (futuro)
    """
    # TODO: Implementar cuando se desarrolle el teclado din√°mico completo
    keyboard = InlineKeyboardMarkup()
    return keyboard


# ===========================
# Botones de Confirmaci√≥n
# ===========================

def create_confirmation_keyboard(action: str, **params) -> InlineKeyboardMarkup:
    """
    Crea un teclado inline de confirmaci√≥n S√≠/No.

    √ötil para acciones destructivas o importantes que requieren confirmaci√≥n.

    Args:
        action: La acci√≥n a confirmar (ej: "delete_char", "drop_item")
        **params: Par√°metros adicionales para la acci√≥n

    Returns:
        InlineKeyboardMarkup: Teclado con botones ‚úÖ S√≠ / ‚ùå No

    Examples:
        >>> create_confirmation_keyboard("delete_char", char_id=5)
        [ ‚úÖ S√≠ ] [ ‚ùå No ]
    """
    keyboard = InlineKeyboardMarkup(row_width=2)

    yes_button = InlineKeyboardButton(
        text="‚úÖ S√≠",
        callback_data=create_callback_data(f"confirm_{action}", confirm="yes", **params)
    )
    no_button = InlineKeyboardButton(
        text="‚ùå No",
        callback_data=create_callback_data(f"confirm_{action}", confirm="no", **params)
    )

    keyboard.row(yes_button, no_button)
    return keyboard


# ===========================
# Helper: Bot√≥n de Actualizar
# ===========================

def create_refresh_button(context: str) -> InlineKeyboardButton:
    """
    Crea un bot√≥n individual de "Actualizar" para refrescar informaci√≥n.

    Args:
        context: El contexto a refrescar (ej: "room", "inventory", "who")

    Returns:
        InlineKeyboardButton: Bot√≥n "üîÑ Actualizar"
    """
    return InlineKeyboardButton(
        text="üîÑ Actualizar",
        callback_data=create_callback_data("refresh", context=context)
    )


# ===========================
# Botones de Paginaci√≥n
# ===========================

def create_pagination_keyboard(
    page: int,
    total_pages: int,
    callback_action: str,
    **params
) -> InlineKeyboardMarkup:
    """
    Crea un teclado inline con botones de navegaci√≥n de p√°ginas.

    Genera botones [ ‚¨ÖÔ∏è Anterior ] [ üìÑ X/Y ] [ Siguiente ‚û°Ô∏è ] que permiten
    navegar entre p√°ginas sin necesidad de escribir comandos.

    Args:
        page: N√∫mero de p√°gina actual (1-indexed)
        total_pages: Total de p√°ginas disponibles
        callback_action: Acci√≥n base para el callback (ej: "pg_items", "pg_rooms")
        **params: Par√°metros adicionales a preservar (filtros, etc.)

    Returns:
        InlineKeyboardMarkup: Teclado con botones de navegaci√≥n

    Examples:
        >>> # Paginaci√≥n simple sin filtros
        >>> keyboard = create_pagination_keyboard(2, 5, "pg_items")

        >>> # Paginaci√≥n con filtros preservados
        >>> keyboard = create_pagination_keyboard(
        ...     page=3,
        ...     total_pages=10,
        ...     callback_action="pg_rooms",
        ...     c="ciudad",  # c = category (abreviado)
        ...     t="seguro,social"  # t = tags (abreviado)
        ... )
    """
    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = []

    # Bot√≥n "Anterior" (solo si no es la primera p√°gina)
    if page > 1:
        prev_button = InlineKeyboardButton(
            text="‚¨ÖÔ∏è Anterior",
            callback_data=create_callback_data(callback_action, p=page - 1, **params)
        )
        buttons.append(prev_button)
    else:
        # Bot√≥n deshabilitado (espacio en blanco)
        buttons.append(InlineKeyboardButton(text=" ", callback_data="noop"))

    # Bot√≥n de informaci√≥n de p√°gina (no hace nada, solo muestra info)
    page_info_button = InlineKeyboardButton(
        text=f"üìÑ {page}/{total_pages}",
        callback_data="noop"  # No hace nada
    )
    buttons.append(page_info_button)

    # Bot√≥n "Siguiente" (solo si no es la √∫ltima p√°gina)
    if page < total_pages:
        next_button = InlineKeyboardButton(
            text="Siguiente ‚û°Ô∏è",
            callback_data=create_callback_data(callback_action, p=page + 1, **params)
        )
        buttons.append(next_button)
    else:
        # Bot√≥n deshabilitado (espacio en blanco)
        buttons.append(InlineKeyboardButton(text=" ", callback_data="noop"))

    keyboard.row(*buttons)
    return keyboard
