# src/services/validation_service.py
"""
Servicio de Validaci√≥n de Integridad del Motor.

Este servicio proporciona validaciones cr√≠ticas que se ejecutan durante el arranque
de la aplicaci√≥n para detectar conflictos y errores de configuraci√≥n en los datos
del juego que podr√≠an causar comportamientos inesperados o bugs.

Filosof√≠a:
- "Fail Fast": Es mejor detectar errores al arrancar que durante el juego.
- "Single Source of Truth": Cada identificador (alias de comando, key de prototipo)
  debe ser √∫nico en su dominio.
- Validaciones data-driven: Se validan prototipos, no c√≥digo.

El sistema valida:
1. Unicidad de aliases de comandos (incluyendo canales din√°micos)
2. Unicidad de keys en prototipos de salas (rooms)
3. Unicidad de keys en prototipos de items
4. M√°s validaciones seg√∫n sea necesario

Uso:
    from src.services import validation_service

    # Durante el arranque de la aplicaci√≥n:
    validation_service.validate_all()  # Lanza ValidationError si hay problemas
"""

import logging
from typing import Dict, List, Set, Tuple
from collections import defaultdict

from game_data.room_prototypes import ROOM_PROTOTYPES
from game_data.item_prototypes import ITEM_PROTOTYPES
from game_data.channel_prototypes import CHANNEL_PROTOTYPES


class ValidationError(Exception):
    """Excepci√≥n lanzada cuando se detecta un error de validaci√≥n cr√≠tico."""
    pass


def _collect_command_aliases() -> Dict[str, List[str]]:
    """
    Recopila todos los aliases de comandos de todos los CommandSets.

    Returns:
        Dict donde la clave es el alias y el valor es una lista de fuentes
        (ej: ["movement.norte", "movement.n", "channels.novato"]).
    """
    from src.handlers.player.dispatcher import COMMAND_SETS

    alias_to_sources = defaultdict(list)

    for set_name, commands in COMMAND_SETS.items():
        for cmd in commands:
            for alias in cmd.names:
                source = f"{set_name}.{cmd.names[0]}"  # ej: "movement.norte"
                alias_to_sources[alias].append(source)

    return alias_to_sources


def validate_command_aliases() -> List[str]:
    """
    Valida que no haya aliases de comandos duplicados.

    Returns:
        Lista de mensajes de error. Vac√≠a si no hay problemas.
    """
    errors = []
    alias_to_sources = _collect_command_aliases()

    for alias, sources in alias_to_sources.items():
        if len(sources) > 1:
            sources_str = ", ".join(sources)
            errors.append(
                f"‚ùå Alias de comando duplicado: '/{alias}' est√° definido en: {sources_str}"
            )

    return errors


def validate_room_prototype_keys() -> List[str]:
    """
    Valida que no haya keys duplicadas en los prototipos de salas.

    Returns:
        Lista de mensajes de error. Vac√≠a si no hay problemas.
    """
    errors = []
    seen_keys = set()

    for key in ROOM_PROTOTYPES.keys():
        if key in seen_keys:
            errors.append(f"‚ùå Key de sala duplicada: '{key}' aparece m√°s de una vez en ROOM_PROTOTYPES")
        seen_keys.add(key)

    # Validaci√≥n adicional: verificar que las salidas apunten a salas que existen
    for room_key, room_data in ROOM_PROTOTYPES.items():
        for direction, exit_data in room_data.get("exits", {}).items():
            # Soporte para formato simple (string) y formato con locks (dict)
            target_key = exit_data if isinstance(exit_data, str) else exit_data.get("to")

            if target_key and target_key not in ROOM_PROTOTYPES:
                errors.append(
                    f"‚ùå Salida inv√°lida en sala '{room_key}': "
                    f"la direcci√≥n '{direction}' apunta a '{target_key}' que no existe"
                )

    return errors


def validate_item_prototype_keys() -> List[str]:
    """
    Valida que no haya keys duplicadas en los prototipos de items.

    Returns:
        Lista de mensajes de error. Vac√≠a si no hay problemas.
    """
    errors = []
    seen_keys = set()

    for key in ITEM_PROTOTYPES.keys():
        if key in seen_keys:
            errors.append(f"‚ùå Key de item duplicada: '{key}' aparece m√°s de una vez en ITEM_PROTOTYPES")
        seen_keys.add(key)

    return errors


def validate_channel_prototype_keys() -> List[str]:
    """
    Valida que no haya keys duplicadas en los prototipos de canales.

    Returns:
        Lista de mensajes de error. Vac√≠a si no hay problemas.
    """
    errors = []
    seen_keys = set()

    for key in CHANNEL_PROTOTYPES.keys():
        if key in seen_keys:
            errors.append(f"‚ùå Key de canal duplicada: '{key}' aparece m√°s de una vez en CHANNEL_PROTOTYPES")
        seen_keys.add(key)

    return errors


def validate_all() -> None:
    """
    Ejecuta todas las validaciones del sistema.

    Si se detecta alg√∫n error, lanza una ValidationError con todos los mensajes.
    Esta funci√≥n debe ser llamada durante el arranque de la aplicaci√≥n, antes
    de iniciar el bot.

    Raises:
        ValidationError: Si se detecta cualquier problema de validaci√≥n.
    """
    logging.info("üîç Ejecutando validaciones de integridad del motor...")

    all_errors = []

    # Validaci√≥n 1: Aliases de comandos
    all_errors.extend(validate_command_aliases())

    # Validaci√≥n 2: Keys de prototipos de salas
    all_errors.extend(validate_room_prototype_keys())

    # Validaci√≥n 3: Keys de prototipos de items
    all_errors.extend(validate_item_prototype_keys())

    # Validaci√≥n 4: Keys de prototipos de canales
    all_errors.extend(validate_channel_prototype_keys())

    if all_errors:
        error_message = "\n".join([
            "\n‚ö†Ô∏è  ERRORES DE VALIDACI√ìN DETECTADOS ‚ö†Ô∏è",
            "=" * 60,
            *all_errors,
            "=" * 60,
            "\nCorrige estos errores antes de continuar."
        ])
        logging.error(error_message)
        raise ValidationError(error_message)

    logging.info("‚úÖ Todas las validaciones pasaron correctamente.")


def get_validation_report() -> str:
    """
    Genera un reporte de validaci√≥n sin lanzar excepciones.
    √ötil para debugging o comandos administrativos.

    Returns:
        String con el reporte de validaci√≥n.
    """
    lines = ["=== REPORTE DE VALIDACI√ìN ===\n"]

    errors = []
    errors.extend(validate_command_aliases())
    errors.extend(validate_room_prototype_keys())
    errors.extend(validate_item_prototype_keys())
    errors.extend(validate_channel_prototype_keys())

    if errors:
        lines.append("‚ùå ERRORES ENCONTRADOS:\n")
        lines.extend([f"  {err}" for err in errors])
    else:
        lines.append("‚úÖ No se encontraron errores.\n")

    # Estad√≠sticas
    alias_count = len(_collect_command_aliases())
    room_count = len(ROOM_PROTOTYPES)
    item_count = len(ITEM_PROTOTYPES)
    channel_count = len(CHANNEL_PROTOTYPES)

    lines.append(f"\nüìä ESTAD√çSTICAS:")
    lines.append(f"  ‚Ä¢ Aliases de comandos: {alias_count}")
    lines.append(f"  ‚Ä¢ Prototipos de salas: {room_count}")
    lines.append(f"  ‚Ä¢ Prototipos de items: {item_count}")
    lines.append(f"  ‚Ä¢ Prototipos de canales: {channel_count}")

    return "\n".join(lines)
