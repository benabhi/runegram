# docker-compose.yml

services:
  bot:
    # Construye la imagen a partir del Dockerfile en el directorio actual
    build: .

    # --- INICIO DE LA MODIFICACIÓN ---
    # 1. ENTRYPOINT: Especifica el script que se ejecutará al iniciar el contenedor.
    #    Nuestro script /app/entrypoint.sh se encargará de esperar a la BD
    #    y ejecutar las migraciones.
    entrypoint: /app/entrypoint.sh

    # 2. COMMAND: Este comando ya no se ejecuta directamente. En su lugar,
    #    se pasa como argumento a nuestro entrypoint.sh. El script lo
    #    ejecutará al final con 'exec "$@"'.
    command: python run.py
    # --- FIN DE LA MODIFICACIÓN ---

    environment:
      - PYTHONPATH=/app

    # Carga las variables de entorno desde el archivo .env
    env_file:
      - .env

    # Se asegura de que postgres y redis se inicien antes que el bot
    depends_on:
      - postgres
      - redis

    # Mapea tu código local al contenedor para ver los cambios al instante
    volumes:
      - ./src:/app/src
      - ./commands:/app/commands
      - ./game_data:/app/game_data
      - ./run.py:/app/run.py
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
      # También mapeamos el entrypoint para poder modificarlo sin reconstruir
      - ./entrypoint.sh:/app/entrypoint.sh

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

volumes:
  postgres_data: